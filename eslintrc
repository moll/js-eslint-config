// http://eslint.org/docs/user-guide/configuring
// http://eslint.org/docs/rules
//
// 0 = disabled
// 1 = warning
// 2 = error
//
// Last updated for
// - ESLint v3.19.0.
// - ESLint React v6.9 (https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md)
//
{
	"rules": {
		/**
		 * Possible Errors
		 * ---------------
		 */
		"no-undef": [2, {"typeof": true}],
		"valid-typeof": 2,
		"no-regex-spaces": 0,
		"no-constant-condition": 2,
		"no-unsafe-negation": 2,
		"no-obj-calls": 2,
		"no-func-assign": 2,
		"no-extra-boolean-cast": 2,
		"no-ex-assign": 2,
		"no-empty-character-class": 2,
		"no-dupe-keys": 2,
		"no-dupe-args": 2,
		"no-debugger": 1,
		"no-inner-declarations": 2,
		"no-invalid-regexp": 2,
		"no-sparse-arrays": 2,
		"no-array-constructor": 2,
		"no-eval": 2,
		"no-extend-native": 2,
		"no-extra-bind": 2,
		"no-iterator": 2,
		"no-multi-str": 2,
		"no-new-func": 2,
		"no-new-object": 2,
		"no-octal-escape": 2,
		"no-script-url": 2,
		"no-undef-init": 2,
		"eol-last": 2,
		"no-unsafe-finally": 2,
		"use-isnan": 2,
		"no-unreachable": 2,
		"no-compare-neg-zero": 2,

		// http://eslint.org/docs/rules/no-extra-parens
		"no-extra-parens": [2, "functions"],

		// Disallow Empty Block Statements ()
		// http://eslint.org/docs/rules/no-empty
		// Warns on try {} catch {} that I use in tests.
		"no-empty": [2, {"allowEmptyCatch": true}],

		// Disallow Assignment in Conditional Statements
		// http://eslint.org/docs/rules/no-cond-assign
		// Wrapping things in parens got annoying fast, and the `if (err = foo())`
		// pattern tended to be useful.
		//"no-cond-assign": [2, "except-parens"],
		"no-cond-assign": 0,

		// Disallow Extra Semicolons
		// Erroring on it prevents the pattern `;[1, 2, 3].forEach` at the top of
		// a function.
		"no-extra-semi": 0,

		// Avoid unexpected multiline expressions
		// http://eslint.org/docs/rules/no-unexpected-multiline
		"no-unexpected-multiline": 1,

		// http://eslint.org/docs/rules/no-prototype-builtins
		"no-prototype-builtins": 2,

		// http://eslint.org/docs/rules/no-confusing-arrow
		"no-confusing-arrow": [1, {"allowParens": true}],

		/**
		 * Best Practices
		 * --------------
		 */
		"no-fallthrough": 2,
		"no-redeclare": 2,
		"no-case-declarations": 2,
		"no-empty-pattern": 2,
		"no-self-assign": [2, {"props": true}],
		"no-self-compare": 2,
		"no-useless-concat": 2,
		"no-useless-call": 2,
		"no-useless-escape": 2,
		"no-useless-return": 2,
		"no-return-await": 2,
		"no-unmodified-loop-condition": 2,
		"no-new-wrappers": 2,
		"no-lone-blocks": 1,
		"array-callback-return": 2,
		"no-implied-eval": 2,
		"no-proto": 2,
		"no-with": 2,
		"prefer-promise-reject-errors": 2,

		// http://eslint.org/docs/rules/no-implicit-coercion
		"no-implicit-coercion": [1, {
			"boolean": false,
			"number": false,
			"string": true
		}],

		// Triggers on lazy functions that make use of `this`.
		"no-invalid-this": 0,

		// Allow braceless conditional blocks.
		"curly": 0,

		// Interferes with Array.prototype.forEach inside a loop.
		"no-loop-func": 0,

		// Labels for jumping out of blocks are useful.
		"no-labels": 0,
		"dot-notation": [1, {"allowKeywords": true}],
		"no-label-var": 2,
		"no-unused-labels": 2,
		"no-extra-label": 2,

		// Disallow Use of Comma Operator
		// http://eslint.org/docs/rules/no-sequences
		"no-sequences": 0,

		// Disallow Unused Expressions
		// http://eslint.org/docs/rules/no-unused-expressions
		//
		// This rule aims to eliminate unused expressions. The value of an
		// expression should always be used, except in the case of expressions that
		// side effect: function calls, assignments, and the new operator.
		//
		// Beware that minifiers may remove `void el.clientWidth` style code that
		// we're using for side-effects. Probably better to ignore this rule there
		// specifically.
		//
		// Sadly, this rule catches multiple assignments in an expression style:
		// if (true) a = 2, b = 4
		// https://github.com/eslint/eslint/issues/2684
		// This is still the case with ESLint v1.
		"no-unused-expressions": [1, {
			"allowShortCircuit": false,
			"allowTernary": true
		}],

		// Disallow new For Side Effects
		// http://eslint.org/docs/rules/no-new
		// Erroring on this prevents use testing `new Model` for exceptions without
		// assigning it to an unused variable.
		"no-new": 0,

		// This rule is aimed at eliminating the type-unsafe equality operators.
		// http://eslint.org/docs/rules/eqeqeq
		//
		// Smart enforces the use of === and !== except for these cases:
		// * Comparing two literal values
		// * Evaluating the value of typeof
		// * Comparing against null
		"eqeqeq": 0,

		// Treat var as Block Scoped
		// http://eslint.org/docs/rules/block-scoped-var
		// The block-scoped-var rule generates warnings when variables are used
		// outside of the block in which they were defined. This emulates C-style
		// block scope.
		"block-scoped-var": 2,

		// Require Consistent Returns
		// http://eslint.org/docs/rules/consistent-return
		// This rule is aimed at ensuring all return statements either specify
		// a value or don't specify a value.
		//
		// treatUndefinedAsUnspecified should allow `return void foo()`.
		"consistent-return": [2, {"treatUndefinedAsUnspecified": true}],

		// Disallow return in else
		// http://eslint.org/docs/rules/no-else-return
		// If an if block contains a return statement, the else block becomes
		// unnecessary. Its contents can be placed outside of the block.
		//
		// Sometimes an `else` is nice for symmetry.
		"no-else-return": 0,

		// Restrict what can be thrown as an exception
		// http://eslint.org/docs/rules/no-throw-literal
		"no-throw-literal": 2,

		// Disallow Assignment in return Statement
		// http://eslint.org/docs/rules/no-return-assign
		"no-return-assign": 0,

		// Disallow Octal Literals
		// http://eslint.org/docs/rules/no-octal
		// Octals are useful for file modes. Sadly disabled in strict mode, so
		// better be compatible. Rule also enabled by impliedStrict.
		"no-octal": 2,

		// Disallow Use of caller/callee
		// http://eslint.org/docs/rules/no-caller
		"no-caller": 2,

		// Disallow Reassignment of Native Objects
		// http://eslint.org/docs/rules/no-native-reassign
		// Re-assigning ES6 objects in local scope with their polyfill equivalents
		// is handy.
		"no-global-assign": [2, {"exceptions": ["Map", "Set", "WeakMap"]}],

		// Require or disallow Yoda Conditions
		// Yoda conditions are so named because the literal value of the condition
		// comes first while the variable comes second.
		"yoda": [2, "never"],


		/**
		 * Strict Mode
		 * -----------
		 */
		// Strict Mode
		// http://eslint.org/docs/rules/strict
		"strict": 0,

		/**
		 * Variables
		 * ---------
		 */
		"no-delete-var": 2,
		"no-shadow-restricted-names": 2,

		// Disallow Unused Variables
		// http://eslint.org/docs/rules/no-unused-vars
		"no-unused-vars": [2, {
			"vars": "all", "varsIgnorePattern": "^_\\w",
			"args": "all", "argsIgnorePattern": "^_\\w"
		}],

		// Disallow use before a variable is defined with "var", but allow
		// functions to be defined later with the function statement syntax.
		"no-use-before-define": [2, "nofunc"],

		// Disallow Shadowing
		// http://eslint.org/docs/rules/no-shadow
		"no-shadow": 0,

		// Disallow Shadowing of Variables Inside of catch
		// http://eslint.org/docs/rules/no-catch-shadow
		// In IE 8 and earlier, the catch clause parameter can overwrite the value
		// of a variable in the outer scope, if that variable has the same name as
		// the catch clause parameter.
		"no-catch-shadow": 2,


		/**
		 * Node.js
		 * -------
		 */
		//
		// Disallow process.exit()
		"no-process-exit": 0,

		// Ensures Callback Error Handling
		// http://eslint.org/docs/rules/handle-callback-err
		// False positives when just using an argument named "err" in non-callback
		// style functions.
		"handle-callback-err": 0,

		// Disallow string concatenation when using _dirname and _filename
		// http://eslint.org/docs/rules/no-path-concat
		// Doesn't windows support forward slashes as well these days?
		"no-path-concat": 0,

		// Disallow Mixed Requires
		// http://eslint.org/docs/rules/no-mixed-requires
		// My rules for requiring core and modules first, but putting functions at
		// the bottom differs from this rule.
		//"no-mixed-requires": 0

		// Disallow new require(...)
		// http://eslint.org/docs/rules/no-new-require
		"no-new-require": 2,

		/**
		 * Stylistic Issues
		 * ----------------
		 */
		"quotes": [1, "double", {
			"avoidEscape": true,
			"allowTemplateLiterals": true
		}],

		"linebreak-style": [1, "unix"],
		"no-multiple-empty-lines": [1, {"max": 2}],
		"no-multi-spaces": 1,
		"comma-spacing": 1,
		"dot-location": [0, "object"],
		"no-whitespace-before-property": 1,
		"template-tag-spacing": [2, "never"],

		// http://eslint.org/docs/rules/no-irregular-whitespace
		"no-irregular-whitespace": [1, {
			"skipStrings": true,
			"skipComments": true,
			"skipTemplates": true
		}],

		// This only applies to a single line, not to the whole file.
		"no-mixed-spaces-and-tabs": 1,

		// Requiring parenthesis always makes 0, 1 and n argument cases consistent.
		"arrow-parens": [1, "always"],

		// Disallow spacing between function identifiers and their applications.
		"func-call-spacing": [1, "never"],

		// Disallow or Enforce Dangling Commas
		// http://eslint.org/docs/rules/comma-dangle
		// This rule takes one argument. If it is "always" then it warns whenever
		// a missing comma is detected. If "always-multiline" then it warns if
		// there is a missing trailing comma on arrays or objects that span
		// multiple lines, and warns if there is a trailing comma present on single
		// line arrays or objects. If "never" then it warns whenever an trailing
		// comma is detected. The default value of this option is "never".
		"comma-dangle": 0,

		// Disallow or enforce spaces inside of brackets.
		// http://eslint.org/docs/rules/array-bracket-spacing
		"array-bracket-spacing": [1, "never"],

		// Disable warning about missing () when invoking a constructor.
		"new-parens": 0,

		// Validate Indentation
		// http://eslint.org/docs/rules/indent
		"indent": [0, "tab", {"SwitchCase": 1}],

		// This rule looks for any underscores (_) located within the source code.
		// It ignores leading and trailing underscores and only checks those in the
		// middle of a variable name.
		// http://eslint.org/docs/rules/camelcase
		//
		// APIs out of our control may have snake-cased attributes. Don't check
		// those.
		"camelcase": [1, {"properties": "never"}],

		// Require Brace Style ()
		// http://eslint.org/docs/rules/brace-style
		// Stroustrup is for an `else` on its own line.
		// Stroustrup prevents using `try {} catch {}`, but 1tbs cuddles `else`s.
		//"brace-style": [1, "stroustrup", {"allowSingleLine": true}],

		// Comma style
		"comma-style": [1, "last"],

		// Allow semicolon-less code, but don't require it.
		// http://eslint.org/docs/rules/semi
		"semi": 0,

		// Enforce spacing before and after semicolons
		// http://eslint.org/docs/rules/semi-spacing
		// Erroring on it prevents the pattern `;(a || b).name`.
		"semi-spacing": 0,

		// This rule aims to eliminate the use of dangling underscores in
		// identifiers.
		"no-underscore-dangle": 0,

		// http://eslint.org/docs/rules/space-unary-ops
		"space-unary-ops": [1, {"words": true, "nonwords": false}],

		// Require Spaces Around Infix Operators
		// http://eslint.org/docs/rules/space-infix-ops
		// Having no spaces occasionally helps reduce width to match 80 characters.
		"space-infix-ops": 0,

		// Require Constructors to Use Initial Caps
		// http://eslint.org/docs/rules/new-cap
		// It also forbids using Q(foo) or my mixin-style of Dateable(Model) by
		// default.
		"new-cap": [1, {
			// When true, rule checks if all new operators are called only with
			// uppercase-started functions.
			//
			// This interferes with `new this.model` style code.
			"newIsCap": false,

			// When true, rule checks if all uppercase-started functions are called
			// only with new operator.
			"capIsNew": false
		}],

		// Require Consistent This
		// http://eslint.org/docs/rules/consistent-this
		"consistent-this": [0, "self"],

		// Enforce Function Style
		// http://eslint.org/docs/rules/func-style
		"func-style": [1, "declaration", {"allowArrowFunctions": true}],

		// Disallow if as the Only Statement in an else Block
		"no-lonely-if": 1,

		// Disallow boolean literals in conditional expressions
		"no-unneeded-ternary": 1,

		// Disallow or enforce spaces inside of curly braces in objects
		"object-curly-spacing": [1, "never"],

		// Enforce padding within blocks
		// http://eslint.org/docs/rules/padded-blocks
		// Reenable when https://github.com/eslint/eslint/issues/2788 is fixed.
		// Should be in v1.
		"padded-blocks": [1, "never"],

		// Quoting Style for Property Names ()
		// http://eslint.org/docs/rules/quote-props
		// Some places look better if all keys are consistently quoted.
		//"quote-props": [1, "as-needed"],
		"quote-props": 0,

		// Enforce Property Spacing
		// http://eslint.org/docs/rules/key-spacing
		// Optional alignment with at least one space would be nicest, but
		// using {"align": "value"} requires alignment for all keys.
		"key-spacing": 0,

		// Require or disallow spaces before function parenthesis
		"space-before-function-paren": [1, "never"],

		// Require Or Disallow Space Before Blocks
		// http://eslint.org/docs/rules/space-before-blocks
		"space-before-blocks": [1, "always"],

		// Require or disallow spaces following keywords
		"keyword-spacing": [1, {"before": true, "after": true}],

		// Disallow or enforce spaces inside of parentheses
		"space-in-parens": [1, "never"],

		// Disallow trailing spaces at the end of lines
		// http://eslint.org/docs/rules/no-trailing-spaces.html
		// Interferes with Markdown syntax in comment blocks.
		"no-trailing-spaces": 0,

		/**
		 * ECMAScript 6
		 * ------------
		 */
		//"prefer-const": 1
		"no-this-before-super": 2,
		"require-yield": 2,
		"require-await": 2,
		"no-class-assign": 2,
		"no-const-assign": 2,
		"no-dupe-class-members": 2,
		"no-new-symbol": 2,
		"no-useless-rename": 2,
		"prefer-const": 0,
		"prefer-rest-params": 0,
		"prefer-spread": 0,
		"rest-spread-spacing": [1, "never"],
		"yield-star-spacing": [1, {"before": false, "after": true}],
		"template-curly-spacing": [1, "never"],
		"no-template-curly-in-string": 1,

		// Duplicate imports are easier to delete than modifying the contents of
		// brackets.
		"no-duplicate-imports": 0,

		// Some symbols are lexically scoped and self-explanatory through their
		// variable name. Naming them twice is bothersome.
		"symbol-description": 0,

		// Denying non-this using class methods interferes with getters/setters
		// that could, but need not access `this`.
		"class-methods-use-this": 0,

		// Enforce the spacing around the * in generators
		// http://eslint.org/docs/rules/generator-star-spacing
		// Using "after" errors on function*().
		// Using "neither" errors on function* foo().
		"generator-star-spacing": 0,

		// Verify super() callings in constructors
		// http://eslint.org/docs/rules/constructor-super
		// My use of mixins is too complicated for it to follow.
		"constructor-super": 0,

		// Require Object Literal Shorthand Syntax
		// http://eslint.org/docs/rules/object-shorthand
		"object-shorthand": 0,

		/**
		 * Legacy
		 * ------
		 */
		// Limit Maximum Length of Line
		// http://eslint.org/docs/rules/max-len
		// The total number of characters allowed on each line of code. This
		// character count includes indentation.	The character count to use
		// whenever a tab character is encountered.
		//
		// This also catches links in comments.
		//"max-len": [1, 80, 2],

		/**
		 * React
		 * -----
		 */
		"jsx-quotes": [1, "prefer-double"],
		"react/jsx-no-undef": 2,
		"react/jsx-uses-react": 2,
		"react/jsx-uses-vars": 2,
		"react/jsx-no-duplicate-props": [2, {"ignoreCase": true}],
		"react/jsx-pascal-case": 1,
		"react/jsx-space-before-closing": 1,
		"react/jsx-no-comment-textnodes": 2,
		"react/jsx-filename-extension": 2,
		"react/style-prop-object": 2,
		"react/no-children-prop": 2,

		// Can't configure this to just require noopener, not referrer.
		// https://html.spec.whatwg.org/multipage/semantics.html#link-type-noreferrer
		"react/jsx-no-target-blank": 0,

		// The first property should always be placed on a new line if the JSX tag
		// takes up multiple lines and there are multiple properties.
		"react/jsx-first-prop-new-line": [0, "multiline-multiprop"],

		// Anton's Whisper's proof-of-concept often used binds.
		"react/jsx-no-bind": 1,
		
		// Prevent missing React when using JSX
		"react/react-in-jsx-scope": 2,

		// Enforce boolean attributes notation in JSX
		// https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
		"react/jsx-boolean-value": 1,

		// Prevent extra closing tags for components without children
		// https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
		"react/self-closing-comp": 1,

		// https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md
		// gets merged.
		"react/jsx-curly-spacing": [1, "never"],

		// https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
		"react/jsx-closing-bracket-location": 0,

		// Prevent usage of unknown DOM property
		// https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
		// Doesn't work with Virtual DOM's properties which follow the DOM, such as
		// autoComplete (React) vs autocomplete (DOM).
		"react/no-unknown-property": 0
	},

	"env": {
		// Don't use the browser env to not get a bunch of globals. Event etc.
		// Allow browser globals selectively.
		"es6": true,
		"node": true
	},

	"parserOptions": {
		"ecmaVersion": 6,

		"ecmaFeatures": {
			"impliedStrict": true,
			"jsx": true
		}
	},

	// Set each global variable name equal to true to allow the variable to be
	// overwritten or false to disallow overwriting.
	"globals": {
		"describe": false,
		"xdescribe": false,
		"it": false,
		"xit": false,
		"before": false,
		"after": false,
		"beforeEach": false,
		"afterEach": false,
		"window": false,
		"document": false,
		"Intl": true
	},

	"plugins": [
		"react"
	]
}
